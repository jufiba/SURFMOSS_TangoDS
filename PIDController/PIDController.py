#!/usr/bin/env python3
# -*- coding:utf-8 -*-


# ############################################################################
#  license :
# ============================================================================
#
#  File :        PIDController.py
#
#  Project :     PID Controller
#
# This file is part of Tango device class.
# 
# Tango is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Tango is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Tango.  If not, see <http://www.gnu.org/licenses/>.
# 
#
#  $Author :      Juan de la Figuera$
#
#  $Revision :    $
#
#  $Date :        $
#
#  $HeadUrl :     $
# ============================================================================
#            This file is generated by POGO
#     (Program Obviously used to Generate tango Object)
# ############################################################################

__all__ = ["PIDController", "PIDControllerClass", "main"]

__docformat__ = 'restructuredtext'

import PyTango
import sys
# Add additional import
#----- PROTECTED REGION ID(PIDController.additionnal_import) ENABLED START -----#

from threading import Thread
import time
from simple_pid import PID

class ControlThread(Thread):

    def __init__ (self, pidctrl_device):
        Thread.__init__(self)
        self.pidctrl_device = pidctrl_device
 
    def run(self):
        output_value = self.pidctrl_device.output_device.read_attribute(self.pidctrl_device.OutputAttribute).value
        self.pidctrl_device.pid.set_auto_mode(True, last_output=output_value)
        
        while(self.pidctrl_device.stop_ctrlloop == 0):
            input_value = self.pidctrl_device.input_device.read_attribute(self.pidctrl_device.InputAttribute).value
            output_value=self.pidctrl_device.pid(input_value)
            (p, i, d) = self.pidctrl_device.pid.components
            self.pidctrl_device.debug_stream("PID components P %f I %f D %f"%(p,i,d))
            self.pidctrl_device.output_device.write_attribute(self.pidctrl_device.OutputAttribute, output_value)
 
        self.pidctrl_device.set_state(PyTango.DevState.OFF)
        self.pidctrl_device.stop_ctrlloop = 0
        
#----- PROTECTED REGION END -----#	//	PIDController.additionnal_import

# Device States Description
# ON : 
# FAULT : 
# OFF : 


class PIDController (PyTango.Device_4Impl):
    """Class for controlling a variable using the PID algorithm"""
    
    # -------- Add you global variables here --------------------------
    #----- PROTECTED REGION ID(PIDController.global_variables) ENABLED START -----#

    #----- PROTECTED REGION END -----#	//	PIDController.global_variables

    def __init__(self, cl, name):
        PyTango.Device_4Impl.__init__(self,cl,name)
        self.debug_stream("In __init__()")
        PIDController.init_device(self)
        #----- PROTECTED REGION ID(PIDController.__init__) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	PIDController.__init__
        
    def delete_device(self):
        self.debug_stream("In delete_device()")
        #----- PROTECTED REGION ID(PIDController.delete_device) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	PIDController.delete_device

    def init_device(self):
        self.debug_stream("In init_device()")
        self.get_device_properties(self.get_device_class())
        self.attr_Proportional_read = 0.0
        self.attr_Integral_read = 0.0
        self.attr_Differential_read = 0.0
        self.attr_LoopTime_read = 0.0
        self.attr_OutputLimit_read = 0.0
        self.attr_SetPoint_read = 0.0
        #----- PROTECTED REGION ID(PIDController.init_device) ENABLED START -----#
        self.pid=PID()
        self.set_state(PyTango.DevState.OFF)
            
        try:
            self.input_device = PyTango.DeviceProxy(self.InputDS)
            self.output_device = PyTango.DeviceProxy(self.OutputDS)
        except:
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Not able to connect to input or/and output devices (" + self.InputDS + ", " + self.OutputDS + ")")

        self.stop_ctrlloop = 0
        

        
        #----- PROTECTED REGION END -----#	//	PIDController.init_device

    def always_executed_hook(self):
        self.debug_stream("In always_excuted_hook()")
        #----- PROTECTED REGION ID(PIDController.always_executed_hook) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	PIDController.always_executed_hook

    # -------------------------------------------------------------------------
    #    PIDController read/write attribute methods
    # -------------------------------------------------------------------------
    
    def read_Proportional(self, attr):
        self.debug_stream("In read_Proportional()")
        #----- PROTECTED REGION ID(PIDController.Proportional_read) ENABLED START -----#
        attr.set_value(self.attr_Proportional_read)
        #----- PROTECTED REGION END -----#	//	PIDController.Proportional_read
        
    def write_Proportional(self, attr):
        self.debug_stream("In write_Proportional()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(PIDController.Proportional_write) ENABLED START -----#
        self.pid.Kp=data
        self.attr_Proportional_read = data
        
        #----- PROTECTED REGION END -----#	//	PIDController.Proportional_write
        
    def read_Integral(self, attr):
        self.debug_stream("In read_Integral()")
        #----- PROTECTED REGION ID(PIDController.Integral_read) ENABLED START -----#
        attr.set_value(self.attr_Integral_read)
        
        #----- PROTECTED REGION END -----#	//	PIDController.Integral_read
        
    def write_Integral(self, attr):
        self.debug_stream("In write_Integral()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(PIDController.Integral_write) ENABLED START -----#
        self.pid.Ki=data
        self.attr_Integral_read = data
        
        #----- PROTECTED REGION END -----#	//	PIDController.Integral_write
        
    def read_Differential(self, attr):
        self.debug_stream("In read_Differential()")
        #----- PROTECTED REGION ID(PIDController.Differential_read) ENABLED START -----#
        
        attr.set_value(self.attr_Differential_read)
        
        #----- PROTECTED REGION END -----#	//	PIDController.Differential_read
        
    def write_Differential(self, attr):
        self.debug_stream("In write_Differential()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(PIDController.Differential_write) ENABLED START -----#
        self.pid.Kd=data
        self.attr_Differential_read = data
        
        #----- PROTECTED REGION END -----#	//	PIDController.Differential_write
        
    def read_LoopTime(self, attr):
        self.debug_stream("In read_LoopTime()")
        #----- PROTECTED REGION ID(PIDController.LoopTime_read) ENABLED START -----#
        attr.set_value(self.attr_LoopTime_read)
        
        #----- PROTECTED REGION END -----#	//	PIDController.LoopTime_read
        
    def write_LoopTime(self, attr):
        self.debug_stream("In write_LoopTime()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(PIDController.LoopTime_write) ENABLED START -----#
        self.pid.sample_time=data
        self.attr_LoopTime_read = data
        
        #----- PROTECTED REGION END -----#	//	PIDController.LoopTime_write
        
    def read_OutputLimit(self, attr):
        self.debug_stream("In read_OutputLimit()")
        #----- PROTECTED REGION ID(PIDController.OutputLimit_read) ENABLED START -----#
        attr.set_value(self.attr_OutputLimit_read)
        
        #----- PROTECTED REGION END -----#	//	PIDController.OutputLimit_read
        
    def write_OutputLimit(self, attr):
        self.debug_stream("In write_OutputLimit()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(PIDController.OutputLimit_write) ENABLED START -----#
        self.pid.output_limits=(0,data)
        self.attr_OutputLimit_read = data
        
        #----- PROTECTED REGION END -----#	//	PIDController.OutputLimit_write
        
    def read_SetPoint(self, attr):
        self.debug_stream("In read_SetPoint()")
        #----- PROTECTED REGION ID(PIDController.SetPoint_read) ENABLED START -----#
        attr.set_value(self.attr_SetPoint_read)
        
        #----- PROTECTED REGION END -----#	//	PIDController.SetPoint_read
        
    def write_SetPoint(self, attr):
        self.debug_stream("In write_SetPoint()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(PIDController.SetPoint_write) ENABLED START -----#
        self.pid.setpoint=data
        self.attr_SetPoint_read = data
        #----- PROTECTED REGION END -----#	//	PIDController.SetPoint_write
        
    
    
            
    def read_attr_hardware(self, data):
        self.debug_stream("In read_attr_hardware()")
        #----- PROTECTED REGION ID(PIDController.read_attr_hardware) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	PIDController.read_attr_hardware


    # -------------------------------------------------------------------------
    #    PIDController command methods
    # -------------------------------------------------------------------------
    
    def StartCtrlLoop(self):
        """ Start control loop
        """
        self.debug_stream("In StartCtrlLoop()")
        #----- PROTECTED REGION ID(PIDController.StartCtrlLoop) ENABLED START -----#
        state=self.get_state()
        if (state==PyTango.DevState.ON):
            return
        elif (state==PyTango.DevState.OFF):
            self.set_state(PyTango.DevState.ON)
            self.set_status("Control loop is running")
            self.stop_ctrloop = 0
            ctrlloop = ControlThread(self)
            ctrlloop.start()
            return
        #----- PROTECTED REGION END -----#	//	PIDController.StartCtrlLoop
        
    def StopCtrlLoop(self):
        """ Stop control loop
        """
        self.debug_stream("In StopCtrlLoop()")
        #----- PROTECTED REGION ID(PIDController.StopCtrlLoop) ENABLED START -----#
        state=self.get_state()
        if (state==PyTango.DevState.OFF):
            return
        elif if (state==PyTango.DevState.ON):
            self.stop_ctrlloop = 1
            self.set_status("Control loop is stopped")
            self.set_state(PyTango.DevState.OFF)
        #----- PROTECTED REGION END -----#	//	PIDController.StopCtrlLoop
        

    #----- PROTECTED REGION ID(PIDController.programmer_methods) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	PIDController.programmer_methods

class PIDControllerClass(PyTango.DeviceClass):
    # -------- Add you global class variables here --------------------------
    #----- PROTECTED REGION ID(PIDController.global_class_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	PIDController.global_class_variables


    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
        'InputDS':
            [PyTango.DevString, 
            "Device Server where the input parameters are read from",
            ["leem/power/hv1"] ],
        'OutputDS':
            [PyTango.DevString, 
            "Device Server where the output parameter is write to",
            ["leem/power/hv1"] ],
        'InputAttribute':
            [PyTango.DevString, 
            "String describing what to read from the input device",
            ["Power"] ],
        'OutputAttribute':
            [PyTango.DevString, 
            "Name of the attribute for writing the pid computed value.",
            ["SetVoltage"] ],
        }


    #    Command definitions
    cmd_list = {
        'StartCtrlLoop':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        'StopCtrlLoop':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        }


    #    Attribute definitions
    attr_list = {
        'Proportional':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'min value': "0",
                'description': "P parameter",
                'Display level': PyTango.DispLevel.EXPERT,
                'Memorized':"true"
            } ],
        'Integral':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'min value': "0",
                'description': "I parameter",
                'Display level': PyTango.DispLevel.EXPERT,
                'Memorized':"true"
            } ],
        'Differential':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'min value': "0",
                'description': "D parameter",
                'Display level': PyTango.DispLevel.EXPERT,
                'Memorized':"true"
            } ],
        'LoopTime':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'unit': "s",
                'min value': "0",
                'description': "Cicle time for the control loop.",
                'Display level': PyTango.DispLevel.EXPERT,
                'Memorized':"true"
            } ],
        'OutputLimit':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'description': "Limit for the output value.",
                'Memorized':"true"
            } ],
        'SetPoint':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'Memorized':"true"
            } ],
        }


def main():
    try:
        py = PyTango.Util(sys.argv)
        py.add_class(PIDControllerClass, PIDController, 'PIDController')
        #----- PROTECTED REGION ID(PIDController.add_classes) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	PIDController.add_classes

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed as e:
        print ('-------> Received a DevFailed exception:', e)
    except Exception as e:
        print ('-------> An unforeseen exception occured....', e)

if __name__ == '__main__':
    main()
